{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielgonzalez/Desktop/Hackaton/capital-carnico/src/context/ContractProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as anchor from '@project-serum/anchor';\nimport { useAnchorWallet, useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { PublicKey, SystemProgram } from '@solana/web3.js';\nimport { createContext, useContext, useEffect, useState, useMemo } from 'react';\nimport { idl } from '../idl.json';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { utf8 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport { getAvatarUrl } from '../functions/getAvatarUrl';\nimport { getRandomName } from '../functions/getRandomName';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PROGRAM_KEY = new PublicKey(idl.metadata.address);\nconst ContractContext = /*#__PURE__*/createContext();\nexport const useBlog = () => {\n  _s();\n  const context = useContext(ContractContext);\n  if (!context) {\n    throw new Error('Parent must be wrapped inside PostsProvider');\n  }\n  return context;\n};\n_s(useBlog, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ContractProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState();\n  const [initialized, setInitialized] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [transactionPending, setTransactionPending] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [lastPostId, setLastPostId] = useState();\n  const anchorWallet = useAnchorWallet();\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const program = useMemo(() => {\n    if (anchorWallet) {\n      const provider = new anchor.AnchorProvider(connection, anchorWallet, anchor.AnchorProvider.defaultOptions());\n      return new anchor.Program(idl, PROGRAM_KEY, provider);\n    }\n  }, [connection, anchorWallet]);\n  useEffect(() => {\n    const start = async () => {\n      if (program && publicKey) {\n        try {\n          const [userPda] = await findProgramAddressSync([utf8.encode('user'), publicKey.toBuffer()], program.programId);\n          const user = await program.account.userAccount.fetch(userPda);\n          if (user) {\n            setInitialized(true);\n            setUser(user);\n            setLastPostId(user.lastPostId);\n            const postAccounts = await program.account.postAccount.all(publicKey.toString());\n            setPosts(postAccounts);\n          }\n        } catch (error) {\n          console.log(error);\n          setInitialized(false);\n        }\n      }\n    };\n    start();\n  }, [program, publicKey, transactionPending]);\n  const initUser = async () => {\n    if (program && publicKey) {\n      try {\n        setTransactionPending(true);\n        const [userPda] = findProgramAddressSync([utf8.encode('user'), publicKey.toBuffer()], program.programId);\n        const name = getRandomName();\n        const avatar = getAvatarUrl(name);\n        await program.methods.initUser(name, avatar).accounts({\n          userAccount: userPda,\n          authority: publicKey,\n          systemProgram: SystemProgram.programId\n        }).rpc();\n        setInitialized(true);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setTransactionPending(false);\n      }\n    }\n  };\n  const createPost = async (title, content) => {\n    if (program && publicKey) {\n      setTransactionPending(true);\n      try {\n        const [userPda] = findProgramAddressSync([utf8.encode('user'), publicKey.toBuffer()], program.programId);\n        const [postPda] = findProgramAddressSync([utf8.encode('post'), publicKey.toBuffer(), Uint8Array.from([lastPostId])], program.programId);\n        await program.methods.createPost(title, content).accounts({\n          userAccount: userPda,\n          postAccount: postPda,\n          authority: publicKey,\n          systemProgram: SystemProgram.programId\n        }).rpc();\n        setShowModal(false);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setTransactionPending(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ContractContext.Provider, {\n    value: {\n      user,\n      posts,\n      initialized,\n      initUser,\n      createPost,\n      showModal,\n      setShowModal\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s2(ContractProvider, \"5l8VjV/lvjiGIUjyeuz8tJ2BSjM=\", false, function () {\n  return [useAnchorWallet, useConnection, useWallet];\n});\n_c = ContractProvider;\nvar _c;\n$RefreshReg$(_c, \"ContractProvider\");","map":{"version":3,"names":["anchor","useAnchorWallet","useConnection","useWallet","PublicKey","SystemProgram","createContext","useContext","useEffect","useState","useMemo","idl","findProgramAddressSync","utf8","getAvatarUrl","getRandomName","PROGRAM_KEY","metadata","address","ContractContext","useBlog","context","Error","ContractProvider","children","user","setUser","initialized","setInitialized","posts","setPosts","transactionPending","setTransactionPending","showModal","setShowModal","lastPostId","setLastPostId","anchorWallet","connection","publicKey","program","provider","AnchorProvider","defaultOptions","Program","start","userPda","encode","toBuffer","programId","account","userAccount","fetch","postAccounts","postAccount","all","toString","error","console","log","initUser","name","avatar","methods","accounts","authority","systemProgram","rpc","createPost","title","content","postPda","Uint8Array","from"],"sources":["/Users/gabrielgonzalez/Desktop/Hackaton/capital-carnico/src/context/ContractProvider.jsx"],"sourcesContent":["import * as anchor from '@project-serum/anchor';\nimport {\n  useAnchorWallet,\n  useConnection,\n  useWallet,\n} from '@solana/wallet-adapter-react';\nimport { PublicKey, SystemProgram } from '@solana/web3.js';\nimport { createContext, useContext, useEffect, useState, useMemo } from 'react';\nimport { idl } from '../idl.json';\n\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { utf8 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport { getAvatarUrl } from '../functions/getAvatarUrl';\nimport { getRandomName } from '../functions/getRandomName';\n\nconst PROGRAM_KEY = new PublicKey(idl.metadata.address);\n\nconst ContractContext = createContext();\n\nexport const useBlog = () => {\n  const context = useContext(ContractContext);\n  if (!context) {\n    throw new Error('Parent must be wrapped inside PostsProvider');\n  }\n\n  return context;\n};\n\nexport const ContractProvider = ({ children }) => {\n  const [user, setUser] = useState();\n  const [initialized, setInitialized] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [transactionPending, setTransactionPending] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [lastPostId, setLastPostId] = useState();\n\n  const anchorWallet = useAnchorWallet();\n  const { connection } = useConnection();\n  const { publicKey } = useWallet();\n\n  const program = useMemo(() => {\n    if (anchorWallet) {\n      const provider = new anchor.AnchorProvider(\n        connection,\n        anchorWallet,\n        anchor.AnchorProvider.defaultOptions()\n      );\n      return new anchor.Program(idl, PROGRAM_KEY, provider);\n    }\n  }, [connection, anchorWallet]);\n\n  useEffect(() => {\n    const start = async () => {\n      if (program && publicKey) {\n        try {\n          const [userPda] = await findProgramAddressSync(\n            [utf8.encode('user'), publicKey.toBuffer()],\n            program.programId\n          );\n          const user = await program.account.userAccount.fetch(userPda);\n          if (user) {\n            setInitialized(true);\n            setUser(user);\n            setLastPostId(user.lastPostId);\n            const postAccounts = await program.account.postAccount.all(\n              publicKey.toString()\n            );\n            setPosts(postAccounts);\n          }\n        } catch (error) {\n          console.log(error);\n          setInitialized(false);\n        }\n      }\n    };\n\n    start();\n  }, [program, publicKey, transactionPending]);\n\n  const initUser = async () => {\n    if (program && publicKey) {\n      try {\n        setTransactionPending(true);\n        const [userPda] = findProgramAddressSync(\n          [utf8.encode('user'), publicKey.toBuffer()],\n          program.programId\n        );\n        const name = getRandomName();\n        const avatar = getAvatarUrl(name);\n\n        await program.methods\n          .initUser(name, avatar)\n          .accounts({\n            userAccount: userPda,\n            authority: publicKey,\n            systemProgram: SystemProgram.programId,\n          })\n          .rpc();\n        setInitialized(true);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setTransactionPending(false);\n      }\n    }\n  };\n\n  const createPost = async (title, content) => {\n    if (program && publicKey) {\n      setTransactionPending(true);\n      try {\n        const [userPda] = findProgramAddressSync(\n          [utf8.encode('user'), publicKey.toBuffer()],\n          program.programId\n        );\n        const [postPda] = findProgramAddressSync(\n          [\n            utf8.encode('post'),\n            publicKey.toBuffer(),\n            Uint8Array.from([lastPostId]),\n          ],\n          program.programId\n        );\n\n        await program.methods\n          .createPost(title, content)\n          .accounts({\n            userAccount: userPda,\n            postAccount: postPda,\n            authority: publicKey,\n            systemProgram: SystemProgram.programId,\n          })\n          .rpc();\n\n        setShowModal(false);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setTransactionPending(false);\n      }\n    }\n  };\n\n  return (\n    <ContractContext.Provider\n      value={{\n        user,\n        posts,\n        initialized,\n        initUser,\n        createPost,\n        showModal,\n        setShowModal,\n      }}\n    >\n      {children}\n    </ContractContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}